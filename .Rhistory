# Calculate the mu_mean values by multiplying each median value by 1e12
mu_means <- lapply(median_values, function(median_value) {
4.6e10 * median_value
})
# Print the mu_mean values
print(mu_means)
#| eval: true
# Calculate the mu_mean values by multiplying each combined median value by 4.6e10
mu_means <- lapply(combined_median_values, function(median_value) {
4.6e10 * median_value
})
# Print the mu_mean values
print(mu_means)
#| eval: true
# Define a function to create a Pill2Cases_N object with mapped inputs
# This function takes two arguments: 'name' and 'pill_input'
# @param name The name of the Pill2Cases_N object
# @param pill_input The input object to map to the 'Pill' parameter
# @return A Pill2Cases_N object with the specified mappings
create_cases <- function(name, pill_input) {
Pill2Cases_N$new(name)$  # Create a new Pill2Cases_N object with the given name
map_input("Pill", pill_input)$  # Map the 'Pill' input to the provided 'pill_input' argument
map_input("servings", Constant$new("n_servings", 4.6e10))  # Map the 'servings' input to a constant value of 4.6e10
}
# Create the cases objects for children and adults separately
cases_tp_children <- create_cases("cases_children", Pill_tp_children)
cases_tp_adults <- create_cases("cases_adults", Pill_tp_adults)
cases_hpp_children <- create_cases("cases_children", Pill_hpp_children)
cases_hpp_adults <- create_cases("cases_adults", Pill_hpp_adults)
cases_pef_children <- create_cases("cases_children", Pill_pef_children)
cases_pef_adults <- create_cases("cases_adults", Pill_pef_adults)
# List of cases objects for children and adults
cases_obj_children <- list(cases_tp_children, cases_hpp_children, cases_pef_children)
cases_obj_adults <- list(cases_tp_adults, cases_hpp_adults, cases_pef_adults)
# Calculate and print the number of cases for each Pill object for children and adults
cases_values_children <- lapply(cases_obj_children, function(cases) {
cases_value <- cases$point_estimate()
print(cases_value)
return(cases_value)
})
cases_values_adults <- lapply(cases_obj_adults, function(cases) {
cases_value <- cases$point_estimate()
print(cases_value)
return(cases_value)
})
# Combine the number of cases based on population proportions
population_children <- 0.2
population_adults <- 0.8
combined_cases_values <- mapply(function(cases_children, cases_adults) {
(cases_children * population_children) + (cases_adults * population_adults)
}, cases_values_children, cases_values_adults)
# Print the combined number of cases
print(combined_cases_values)
#| eval: true
# Define a function to create a Pill2Cases_N object with mapped inputs
# This function takes two arguments: 'name' and 'pill_input'
# @param name The name of the Pill2Cases_N object
# @param pill_input The input object to map to the 'Pill' parameter
# @return A Pill2Cases_N object with the specified mappings
create_cases <- function(name, pill_input) {
Pill2Cases_N$new(name)$  # Create a new Pill2Cases_N object with the given name
map_input("Pill", pill_input)$  # Map the 'Pill' input to the provided 'pill_input' argument
map_input("servings", Constant$new("n_servings", 4.6e10))  # Map the 'servings' input to a constant value of 4.6e10
}
# Create the cases objects for children and adults separately
cases_tp_children <- create_cases("cases_children", Pill_tp_children)
cases_tp_adults <- create_cases("cases_adults", Pill_tp_adults)
cases_hpp_children <- create_cases("cases_children", Pill_hpp_children)
cases_hpp_adults <- create_cases("cases_adults", Pill_hpp_adults)
cases_pef_children <- create_cases("cases_children", Pill_pef_children)
cases_pef_adults <- create_cases("cases_adults", Pill_pef_adults)
# List of cases objects for children and adults
cases_obj_children <- list(cases_tp_children, cases_hpp_children, cases_pef_children)
cases_obj_adults <- list(cases_tp_adults, cases_hpp_adults, cases_pef_adults)
# Calculate and print the number of cases for each Pill object for children and adults
cases_values_children <- lapply(cases_obj_children, function(cases) {
cases_value <- cases$point_estimate()
print(cases_value)
return(cases_value)
})
cases_values_adults <- lapply(cases_obj_adults, function(cases) {
cases_value <- cases$point_estimate()
print(cases_value)
return(cases_value)
})
# Combine the number of cases based on population proportions
population_children <- 0.2
population_adults <- 0.8
combined_cases_values <- mapply(function(cases_children, cases_adults) {
(cases_children * population_children) + (cases_adults * population_adults)
}, cases_values_children, cases_values_adults)
# Print the combined number of cases
print(combined_cases_values)
#| eval: false
#| echo: false
plot_model(cases_obj_children)
#| eval: false
#| echo: false
plot_model(cases_tp_children)
plot_model(cases_tp_adults)
#| eval: false
#| echo: false
plot_model(cases_hpp_children)
plot_model(cases_hpp_adults)
#| eval: false
#| echo: false
# Let's check our dependencies to see if we made any mistake in the dependencies of the model, regarding the consistency of the variable names.
cases_tp_children$check_input_types(recursive = TRUE)
cases_tp_adults$check_input_types(recursive = TRUE)
cases_hpp_children$check_input_types(recursive = TRUE)
cases_hpp_adults$check_input_types(recursive = TRUE)
cases_pef_children$check_input_types(recursive = TRUE)
cases_pef_adults$check_input_types(recursive = TRUE)
# Warning: In element Pill: the element expects discrete for input dose. Got continuous instead from dose. We cannot have 321.1 CFU but we made this simplification, this would work if we would take the discrete models of the other case study
#| eval: true
# Define a function to create a DoseResponse_Exponential object with mapped inputs
# This function takes two arguments: 'name' and 'dose_input'
# @param name The name of the DoseResponse_Exponential object
# @param dose_input The input object to map to the 'dose' parameter
# @return A DoseResponse_Exponential object with the specified mappings
create_pill <- function(name, dose_input, r_value) {
DoseResponse_Exponential$new(name)$  # Create a new DoseResponse_Exponential object with the given name
map_input("r", Constant$new("r_dr", r_value))$  # Map the 'r' input to the given r value
map_input("dose", dose_input)  # Map the 'dose' input to the provided 'dose_input' argument
}
# Create the Pill objects for children and adults separately
Pill_tp_children <- create_pill("Pill_children", consumer_dose_tp, 9.3e-3)
Pill_tp_adults <- create_pill("Pill_adults", consumer_dose_tp, 5.1e-3)
Pill_hpp_children <- create_pill("Pill_children", consumer_dose_hpp, 9.3e-3)
Pill_hpp_adults <- create_pill("Pill_adults", consumer_dose_hpp, 5.1e-3)
Pill_pef_children <- create_pill("Pill_children", consumer_dose_pef, 9.3e-3)
Pill_pef_adults <- create_pill("Pill_adults", consumer_dose_pef, 5.1e-3)
# Calculate the median values for each dose response object for both children and adults
median_tp_children <- Pill_tp_children$point_estimate()
median_tp_adults <- Pill_tp_adults$point_estimate()
median_hpp_children <- Pill_hpp_children$point_estimate()
median_hpp_adults <- Pill_hpp_adults$point_estimate()
median_pef_children <- Pill_pef_children$point_estimate()
median_pef_adults <- Pill_pef_adults$point_estimate()
print(median_tp_children)
print(median_tp_adults)
print(median_hpp_children)
print(median_hpp_adults)
print(median_pef_children)
print(median_pef_adults)
# Calculate the overall median values by combining the children and adult values based on population proportions
population_children <- 0.2
population_adults <- 0.8
combined_median_tp <- (median_tp_children * population_children) + (median_tp_adults * population_adults)
combined_median_hpp <- (median_hpp_children * population_children) + (median_hpp_adults * population_adults)
combined_median_pef <- (median_pef_children * population_children) + (median_pef_adults * population_adults)
# Print the combined median values
print(combined_median_tp)
print(combined_median_hpp)
print(combined_median_pef)
#| eval: true
# Define a function to create a Pill2Cases_N object with mapped inputs
# This function takes two arguments: 'name' and 'pill_input'
# @param name The name of the Pill2Cases_N object
# @param pill_input The input object to map to the 'Pill' parameter
# @return A Pill2Cases_N object with the specified mappings
create_cases <- function(name, pill_input) {
Pill2Cases_N$new(name)$  # Create a new Pill2Cases_N object with the given name
map_input("Pill", pill_input)$  # Map the 'Pill' input to the provided 'pill_input' argument
map_input("servings", Constant$new("n_servings", 4.6e10))  # Map the 'servings' input to a constant value of 4.6e10
}
# Create the cases objects for each combined median value
cases_tp <- create_cases("cases_tp", combined_median_tp)
#| eval: true
#| echo: false
#| include: false
# We first load our libraries
library(tidyverse)
library(biorisk)
logN0 <- Uniform$new("logN0", # A uniform distribution
level = 0)$
map_input("min",
Constant$new("logN0_min", 0) # with a constant min. value
)$
map_input ("max",
Constant$new("logN0_max", 1) # and a constant max. value
)
logDref <- -0.67
t_value <- 1.97
sigma <- 0.62
logDrefupper <- logDref + t_value*sigma
logDreflower <- logDref - t_value*sigma
# Convert from log scale to the original scale
Drefupper <- 10^logDrefupper
Dreflower <- 10^logDreflower
# Print the result
print(Drefupper)
print(Dreflower)
## Secondary model
#temperature <- Normal$new("temperature", level = 0)$  # Normal pressure level with some variability assigned
#map_input("mu", Constant$new("temperature_mu", 72))$
# map_input("sigma", Constant$new("temperature_sigma", 5))
Dref_tp <- Constant$new("Dref_tp", Drefupper)
sec_model_tp <- Dz_model$new("D_tp")$
map_input("Dref", Dref_tp)$
map_input("temperature", Constant$new("temperature", 72))$
map_input("z", Constant$new("z_tp", 10.67))$
map_input("Tref", Constant$new("Tref", 70))
t_tp <- Constant$new("t_tp", 0.333) # the treatment time (minutes)
inactivation_tp <- LogLinInactivation$new("Treatment_tp")$
map_input("logN0", logN0)$ #We map logN0 to the initial count defined before
map_input("D", sec_model_tp)$
map_input("t", t_tp)
## Secondary model
pressure <- Normal$new("pressure", level = 0)$  # Normal pressure level with some variability assigned
map_input("mu", Constant$new("pressure_mu", 550))$
map_input("sigma", Constant$new("pressure_sigma", 20))
# Dref_hpp <- Uniform$new("Dref_hpp", level = 0)$  # Variability in Dref
# map_input("min", Constant$new("Dref_hpp_min", 1))$
# map_input("max", Constant$new("Dref_hpp_max", 4))
sec_model_hpp <- Dz_model$new("D_hpp")$
map_input("Dref", Constant$new("Dref_hpp", 1.3))$
map_input("temperature", pressure)$
map_input("z", Constant$new("z_hpp", 304))$
map_input("Tref", Constant$new("Pref", 400))
# t_hpp <- Constant$new("t_hpp", 5) # the treatment time (minutes)
inactivation_hpp <- LogLinInactivation$new("Treatment_hpp")$
map_input("logN0", logN0)$ #We map logN0 to the initial count defined before
map_input("D", sec_model_hpp)$
map_input("t", Constant$new("t_hpp", 1))
# D_pef <- Uniform$new("D_pef", level = 0)$  # Variability in D_pef
# map_input("min", Constant$new("D_pef_min", 70))$
# map_input("max", Constant$new("D_pef_max", 90))
energy_pef <- Normal$new("energy_pef", level = 0)$  # Normal energy input level with some variability assigned
map_input("mu", Constant$new("energy_mu", 120))$
map_input("sigma", Constant$new("energy_sigma", 2))
inactivation_pef <- LogLinInactivation$new("Treatment_pef")$
map_input("logN0", logN0)$ #We map logN0 to the initial count defined before
map_input("D", Constant$new("D_pef", 82.5))$
map_input("t", energy_pef)
inactivation_tp$simulate(1000)
inactivation_tp$density_plot()
inactivation_hpp$simulate(1000)
inactivation_hpp$density_plot()
inactivation_pef$simulate(1000)
inactivation_pef$density_plot()
#| eval: true
# Define the serving_size object
serving_size <- Uniform$new("size", level = 0)$  # Create a new Uniform object named 'size'
map_input("min", Constant$new("min_size", 200))$  # Map the 'min' input to a constant value of 200
map_input("max", Constant$new("max_size", 300))  # Map the 'max' input to a constant value of 500
#| eval: true
# Define a function to create a Concentration2Dose object with mapped inputs
# This function takes two arguments: 'name' and 'logN_input'
# @param name The name of the Concentration2Dose object
# @param logN_input The input object to map to the 'logN' parameter
# @return A Concentration2Dose object with the specified mappings
create_consumer_dose <- function(name, logN_input) {
Concentration2Dose$new(name)$  # Create a new Concentration2Dose object with the given name
map_input("logN", logN_input)$  # Map the 'logN' input to the provided 'logN_input' argument
map_input("size", serving_size)  # Map the 'size' input to the 'serving_size' object
}
# Use the function to create three different consumer dose objects
# Create 'consumer_dose_tp' by calling the function with 'dose' name and 'growth_distrib_tp' for logN
consumer_dose_tp <- create_consumer_dose("dose", inactivation_tp)
# Create 'consumer_dose_hpp' by calling the function with 'dose' name and 'growth_distrib_hpp' for logN
consumer_dose_hpp <- create_consumer_dose("dose", inactivation_hpp)
# Create 'consumer_dose_pef' by calling the function with 'dose' name and 'growth_distrib_pef' for logN
consumer_dose_pef <- create_consumer_dose("dose", inactivation_pef)
#| eval: true
# Define a function to create a DoseResponse_Exponential object with mapped inputs
# This function takes two arguments: 'name' and 'dose_input'
# @param name The name of the DoseResponse_Exponential object
# @param dose_input The input object to map to the 'dose' parameter
# @return A DoseResponse_Exponential object with the specified mappings
create_pill <- function(name, dose_input, r_value) {
DoseResponse_Exponential$new(name)$  # Create a new DoseResponse_Exponential object with the given name
map_input("r", Constant$new("r_dr", r_value))$  # Map the 'r' input to the given r value
map_input("dose", dose_input)  # Map the 'dose' input to the provided 'dose_input' argument
}
# Create the Pill objects for children and adults separately
Pill_tp_children <- create_pill("Pill_children", consumer_dose_tp, 9.3e-3)
Pill_tp_adults <- create_pill("Pill_adults", consumer_dose_tp, 5.1e-3)
Pill_hpp_children <- create_pill("Pill_children", consumer_dose_hpp, 9.3e-3)
Pill_hpp_adults <- create_pill("Pill_adults", consumer_dose_hpp, 5.1e-3)
Pill_pef_children <- create_pill("Pill_children", consumer_dose_pef, 9.3e-3)
Pill_pef_adults <- create_pill("Pill_adults", consumer_dose_pef, 5.1e-3)
# Calculate the median values for each dose response object for both children and adults
median_tp_children <- Pill_tp_children$point_estimate()
median_tp_adults <- Pill_tp_adults$point_estimate()
median_hpp_children <- Pill_hpp_children$point_estimate()
median_hpp_adults <- Pill_hpp_adults$point_estimate()
median_pef_children <- Pill_pef_children$point_estimate()
median_pef_adults <- Pill_pef_adults$point_estimate()
print(median_tp_children)
print(median_tp_adults)
print(median_hpp_children)
print(median_hpp_adults)
print(median_pef_children)
print(median_pef_adults)
# Calculate the overall median values by combining the children and adult values based on population proportions
population_children <- 0.2
population_adults <- 0.8
combined_median_tp <- (median_tp_children * population_children) + (median_tp_adults * population_adults)
combined_median_hpp <- (median_hpp_children * population_children) + (median_hpp_adults * population_adults)
combined_median_pef <- (median_pef_children * population_children) + (median_pef_adults * population_adults)
# Print the combined median values
print(combined_median_tp)
print(combined_median_hpp)
print(combined_median_pef)
#| eval: true
# Calculate the mu_mean values by multiplying each combined median value by 4.6e10
mu_means <- lapply(combined_median_values, function(median_value) {
4.6e10 * median_value
})
# Print the mu_mean values
print(mu_means)
#| eval: true
# Define a function to create a Pill2Cases_N object with mapped inputs
# This function takes two arguments: 'name' and 'pill_input'
# @param name The name of the Pill2Cases_N object
# @param pill_input The input object to map to the 'Pill' parameter
# @return A Pill2Cases_N object with the specified mappings
create_cases <- function(name, pill_input) {
Pill2Cases_N$new(name)$  # Create a new Pill2Cases_N object with the given name
map_input("Pill", pill_input)$  # Map the 'Pill' input to the provided 'pill_input' argument
map_input("servings", Constant$new("n_servings", 4.6e10))  # Map the 'servings' input to a constant value of 4.6e10
}
# Create the cases objects for each combined median value
cases_tp <- create_cases("cases_tp", combined_median_tp)
#| eval: true
# Calculate the mu_mean values by multiplying each combined median value by 4.6e10
mu_means <- lapply(combined_median_values, function(median_value) {
4.6e10 * median_value
})
# Print the mu_mean values
print(mu_means)
#| eval: true
# Calculate the mu_mean values by multiplying each combined median value by 4.6e10
mu_mean_tp <- 4.6e10 * combined_median_tp
mu_mean_hpp <- 4.6e10 * combined_median_hpp
mu_mean_pef <- 4.6e10 * combined_median_pef
# Print the mu_mean values
print(mu_mean_tp)
print(mu_mean_hpp)
print(mu_mean_pef)
#| eval: true
#| echo: false
#| include: false
# We first load our libraries
library(tidyverse)
library(biorisk)
logN0 <- Uniform$new("logN0", # A uniform distribution
level = 0)$
map_input("min",
Constant$new("logN0_min", 0) # with a constant min. value
)$
map_input ("max",
Constant$new("logN0_max", 1) # and a constant max. value
)
logDref <- -0.67
t_value <- 1.97
sigma <- 0.62
logDrefupper <- logDref + t_value*sigma
logDreflower <- logDref - t_value*sigma
# Convert from log scale to the original scale
Drefupper <- 10^logDrefupper
Dreflower <- 10^logDreflower
# Print the result
print(Drefupper)
print(Dreflower)
## Secondary model
#temperature <- Normal$new("temperature", level = 0)$  # Normal pressure level with some variability assigned
#map_input("mu", Constant$new("temperature_mu", 72))$
# map_input("sigma", Constant$new("temperature_sigma", 5))
Dref_tp <- Constant$new("Dref_tp", Drefupper)
sec_model_tp <- Dz_model$new("D_tp")$
map_input("Dref", Dref_tp)$
map_input("temperature", Constant$new("temperature", 72))$
map_input("z", Constant$new("z_tp", 10.67))$
map_input("Tref", Constant$new("Tref", 70))
t_tp <- Constant$new("t_tp", 0.333) # the treatment time (minutes)
inactivation_tp <- LogLinInactivation$new("Treatment_tp")$
map_input("logN0", logN0)$ #We map logN0 to the initial count defined before
map_input("D", sec_model_tp)$
map_input("t", t_tp)
## Secondary model
pressure <- Normal$new("pressure", level = 0)$  # Normal pressure level with some variability assigned
map_input("mu", Constant$new("pressure_mu", 550))$
map_input("sigma", Constant$new("pressure_sigma", 20))
# Dref_hpp <- Uniform$new("Dref_hpp", level = 0)$  # Variability in Dref
# map_input("min", Constant$new("Dref_hpp_min", 1))$
# map_input("max", Constant$new("Dref_hpp_max", 4))
sec_model_hpp <- Dz_model$new("D_hpp")$
map_input("Dref", Constant$new("Dref_hpp", 1.3))$
map_input("temperature", pressure)$
map_input("z", Constant$new("z_hpp", 304))$
map_input("Tref", Constant$new("Pref", 400))
# t_hpp <- Constant$new("t_hpp", 5) # the treatment time (minutes)
inactivation_hpp <- LogLinInactivation$new("Treatment_hpp")$
map_input("logN0", logN0)$ #We map logN0 to the initial count defined before
map_input("D", sec_model_hpp)$
map_input("t", Constant$new("t_hpp", 1))
# D_pef <- Uniform$new("D_pef", level = 0)$  # Variability in D_pef
# map_input("min", Constant$new("D_pef_min", 70))$
# map_input("max", Constant$new("D_pef_max", 90))
energy_pef <- Normal$new("energy_pef", level = 0)$  # Normal energy input level with some variability assigned
map_input("mu", Constant$new("energy_mu", 120))$
map_input("sigma", Constant$new("energy_sigma", 2))
inactivation_pef <- LogLinInactivation$new("Treatment_pef")$
map_input("logN0", logN0)$ #We map logN0 to the initial count defined before
map_input("D", Constant$new("D_pef", 82.5))$
map_input("t", energy_pef)
inactivation_tp$simulate(1000)
inactivation_tp$density_plot()
inactivation_hpp$simulate(1000)
inactivation_hpp$density_plot()
inactivation_pef$simulate(1000)
inactivation_pef$density_plot()
#| eval: true
# Define the serving_size object
serving_size <- Uniform$new("size", level = 0)$  # Create a new Uniform object named 'size'
map_input("min", Constant$new("min_size", 200))$  # Map the 'min' input to a constant value of 200
map_input("max", Constant$new("max_size", 300))  # Map the 'max' input to a constant value of 500
#| eval: true
# Define a function to create a Concentration2Dose object with mapped inputs
# This function takes two arguments: 'name' and 'logN_input'
# @param name The name of the Concentration2Dose object
# @param logN_input The input object to map to the 'logN' parameter
# @return A Concentration2Dose object with the specified mappings
create_consumer_dose <- function(name, logN_input) {
Concentration2Dose$new(name)$  # Create a new Concentration2Dose object with the given name
map_input("logN", logN_input)$  # Map the 'logN' input to the provided 'logN_input' argument
map_input("size", serving_size)  # Map the 'size' input to the 'serving_size' object
}
# Use the function to create three different consumer dose objects
# Create 'consumer_dose_tp' by calling the function with 'dose' name and 'growth_distrib_tp' for logN
consumer_dose_tp <- create_consumer_dose("dose", inactivation_tp)
# Create 'consumer_dose_hpp' by calling the function with 'dose' name and 'growth_distrib_hpp' for logN
consumer_dose_hpp <- create_consumer_dose("dose", inactivation_hpp)
# Create 'consumer_dose_pef' by calling the function with 'dose' name and 'growth_distrib_pef' for logN
consumer_dose_pef <- create_consumer_dose("dose", inactivation_pef)
#| eval: true
# Define a function to create a DoseResponse_Exponential object with mapped inputs
# This function takes two arguments: 'name' and 'dose_input'
# @param name The name of the DoseResponse_Exponential object
# @param dose_input The input object to map to the 'dose' parameter
# @return A DoseResponse_Exponential object with the specified mappings
create_pill <- function(name, dose_input, r_value) {
DoseResponse_Exponential$new(name)$  # Create a new DoseResponse_Exponential object with the given name
map_input("r", Constant$new("r_dr", r_value))$  # Map the 'r' input to the given r value
map_input("dose", dose_input)  # Map the 'dose' input to the provided 'dose_input' argument
}
# Create the Pill objects for children and adults separately
Pill_tp_children <- create_pill("Pill_tp_children", consumer_dose_tp, 9.3e-3)
Pill_tp_adults <- create_pill("Pill_tp_adults", consumer_dose_tp, 5.1e-3)
Pill_hpp_children <- create_pill("Pill_hpp_children", consumer_dose_hpp, 9.3e-3)
Pill_hpp_adults <- create_pill("Pill_hpp_adults", consumer_dose_hpp, 5.1e-3)
Pill_pef_children <- create_pill("Pill_pef_children", consumer_dose_pef, 9.3e-3)
Pill_pef_adults <- create_pill("Pill_pef_adults", consumer_dose_pef, 5.1e-3)
# Calculate the median values for each dose response object for both children and adults
median_tp_children <- Pill_tp_children$point_estimate()
median_tp_adults <- Pill_tp_adults$point_estimate()
median_hpp_children <- Pill_hpp_children$point_estimate()
median_hpp_adults <- Pill_hpp_adults$point_estimate()
median_pef_children <- Pill_pef_children$point_estimate()
median_pef_adults <- Pill_pef_adults$point_estimate()
print(median_tp_children)
print(median_tp_adults)
print(median_hpp_children)
print(median_hpp_adults)
print(median_pef_children)
print(median_pef_adults)
# Calculate the overall median values by combining the children and adult values based on population proportions
population_children <- 0.2
population_adults <- 0.8
combined_median_tp <- (median_tp_children * population_children) + (median_tp_adults * population_adults)
combined_median_hpp <- (median_hpp_children * population_children) + (median_hpp_adults * population_adults)
combined_median_pef <- (median_pef_children * population_children) + (median_pef_adults * population_adults)
# Print the combined median values
print(combined_median_tp)
print(combined_median_hpp)
print(combined_median_pef)
#| eval: true
# Calculate the mu_mean values by multiplying each combined median value by 4.6e10
mu_mean_tp <- 4.6e10 * combined_median_tp
mu_mean_hpp <- 4.6e10 * combined_median_hpp
mu_mean_pef <- 4.6e10 * combined_median_pef
# Print the mu_mean values
print(mu_mean_tp)
print(mu_mean_hpp)
print(mu_mean_pef)
#| eval: true
# Define a function to create a Pill2Cases_N object with mapped inputs
# This function takes two arguments: 'name' and 'pill_input'
# @param name The name of the Pill2Cases_N object
# @param pill_input The input object to map to the 'Pill' parameter
# @return A Pill2Cases_N object with the specified mappings
create_cases <- function(name, pill_input) {
Pill2Cases_N$new(name)$  # Create a new Pill2Cases_N object with the given name
map_input("Pill", Constant$new("Pill", pill_input))$  # Map the 'Pill' input to the provided 'pill_input' argument
map_input("servings", Constant$new("n_servings", 4.6e10))  # Map the 'servings' input to a constant value of 4.6e10
}
# Create the cases objects for each combined median value
cases_tp <- create_cases("cases_tp", combined_median_tp)
cases_hpp <- create_cases("cases_hpp", combined_median_hpp)
cases_pef <- create_cases("cases_pef", combined_median_pef)
# Calculate and print the number of cases for each Pill object
cases_tp_value <- cases_tp$point_estimate()
cases_hpp_value <- cases_hpp$point_estimate()
cases_pef_value <- cases_pef$point_estimate()
print(cases_tp_value)
print(cases_hpp_value)
print(cases_pef_value)
#| eval: false
#| echo: false
plot_model(cases_tp)
