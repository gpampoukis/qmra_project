# Create the three different Pill objects
Pill_tp <- create_pill("Pill", consumer_dose_tp)
Pill_hpp <- create_pill("Pill", consumer_dose_hpp)
Pill_pef <- create_pill("Pill", consumer_dose_pef)
# List of Pill objects
pill_objects <- list(Pill_tp, Pill_hpp, Pill_pef)
# Calculate and print the median values for each dose response object
median_values <- lapply(pill_objects, function(pill) {
median_value <- pill$point_estimate()
print(median_value)
return(median_value)
})
#| eval: true
# Calculate the mu_mean values by multiplying each median value by 1e12
mu_means <- lapply(median_values, function(median_value) {
4.6e10 * median_value
})
# Print the mu_mean values
print(mu_means)
#| eval: true
# Define a function to create a Pill2Cases_N object with mapped inputs
# This function takes two arguments: 'name' and 'pill_input'
# @param name The name of the Pill2Cases_N object
# @param pill_input The input object to map to the 'Pill' parameter
# @return A Pill2Cases_N object with the specified mappings
create_cases <- function(name, pill_input) {
Pill2Cases_N$new(name)$  # Create a new Pill2Cases_N object with the given name
map_input("Pill", pill_input)$  # Map the 'Pill' input to the provided 'pill_input' argument
map_input("servings", Constant$new("n_servings", 4.6e10))  # Map the 'servings' input to a constant value of 1e12
}
# Create the cases objects for each Pill
cases_tp <- create_cases("cases", Pill_tp)
cases_hpp <- create_cases("cases", Pill_hpp)
cases_pef <- create_cases("cases", Pill_pef)
# List of cases objects
cases_obj <- list(cases_tp, cases_hpp, cases_pef)
# Calculate and print the number of cases for each Pill object
cases_values <- lapply(cases_obj, function(cases) {
cases_value <- cases$point_estimate()
print(cases_value)
return(cases_value)
})
#| eval: true
cases_tp$simulate(100000, seed = 241)
cases_hpp$simulate(100000, seed = 241)
cases_pef$simulate(100000, seed = 241)
#| eval: true
cases_tp$histogram(add_discrete = TRUE) + scale_x_log10()
cases_hpp$histogram(add_discrete = TRUE) + scale_x_log10()
cases_pef$histogram(add_discrete = TRUE) + scale_x_log10()
#| eval: true
quantile_table(cases_tp, chosen = c("cases", "Pill", "dose", "inactivation_tp"),
probs = c(0.50, 0.90, 0.99))
quantile_table(cases_hpp, chosen = c("cases", "Pill", "dose", "inactivation_hpp"),
probs = c(0.50, 0.90, 0.99))
quantile_table(cases_pef, chosen = c("cases", "Pill", "dose", "inactivation_pef"),
probs = c(0.50, 0.90, 0.99))
#| eval: true
quantile_table(cases_tp, chosen = c("cases", "Pill", "dose"),
probs = c(0.50, 0.90, 0.99))
quantile_table(cases_hpp, chosen = c("cases", "Pill", "dose"),
probs = c(0.50, 0.90, 0.99))
quantile_table(cases_pef, chosen = c("cases", "Pill", "dose"),
probs = c(0.50, 0.90, 0.99))
#| eval: true
#| label: plot-E
#| fig-height: 8
#| fig-width: 12
# List of cases objects
inactivation_obj <- list(inactivation_tp, inactivation_hpp, inactivation_pef)
# Function to plot outputs for a given case object and growth distribution name
plot_case_outputs <- function(cases_obj, growth_distrib_obj) {
plot_outputs(cases_obj, chosen = c("logN0", "Treatment", "inactivation"))
}
# Use mapply to plot the outputs and print each plot
plots <- mapply(function(cases_obj, inactivation_obj) {
p <- plot_case_outputs(cases_obj, inactivation_obj)
print(p)
}, cases_obj, growth_distrib_obj)
#1 Thermal processing
#2 High Pressure Processing
#3 PEF processing
#| eval: true
quantile_table(cases_tp, chosen = c("cases", "Pill", "dose", "Treatment"),
probs = c(0.50, 0.90, 0.99))
quantile_table(cases_hpp, chosen = c("cases", "Pill", "dose", "Treatment"),
probs = c(0.50, 0.90, 0.99))
quantile_table(cases_pef, chosen = c("cases", "Pill", "dose", "Treatment"),
probs = c(0.50, 0.90, 0.99))
#| eval: true
#| label: plot-E
#| fig-height: 8
#| fig-width: 12
# List of cases objects
inactivation_obj <- list(inactivation_tp, inactivation_hpp, inactivation_pef)
# Function to plot outputs for a given case object and growth distribution name
plot_case_outputs <- function(cases_obj, inactivation_obj) {
plot_outputs(cases_obj, chosen = c("logN0", "Treatment"))
}
# Use mapply to plot the outputs and print each plot
plots <- mapply(function(cases_obj, inactivation_obj) {
p <- plot_case_outputs(cases_obj, inactivation_obj)
print(p)
}, cases_obj, inactivation_obj)
#1 Thermal processing
#2 High Pressure Processing
#3 PEF processing
#| eval: true
#| label: plot-E
#| fig-height: 8
#| fig-width: 12
# List of cases objects
inactivation_obj <- list(inactivation_tp, inactivation_hpp, inactivation_pef)
# Function to plot outputs for a given case object and growth distribution name
plot_case_outputs <- function(cases_obj, inactivation_obj) {
plot_outputs(cases_obj, chosen = c("logN0", "treatment"))
}
# Use mapply to plot the outputs and print each plot
plots <- mapply(function(cases_obj, inactivation_obj) {
p <- plot_case_outputs(cases_obj, inactivation_obj)
print(p)
}, cases_obj, inactivation_obj)
#1 Thermal processing
#2 High Pressure Processing
#3 PEF processing
#| eval: true
#| label: plot-E
#| fig-height: 8
#| fig-width: 12
# List of cases objects
inactivation_obj <- list(inactivation_tp, inactivation_hpp, inactivation_pef)
# Function to plot outputs for a given case object and growth distribution name
plot_case_outputs <- function(cases_obj, inactivation_obj) {
plot_outputs(cases_obj, chosen = c("logN0", "Inactivation"))
}
# Use mapply to plot the outputs and print each plot
plots <- mapply(function(cases_obj, inactivation_obj) {
p <- plot_case_outputs(cases_obj, inactivation_obj)
print(p)
}, cases_obj, inactivation_obj)
#1 Thermal processing
#2 High Pressure Processing
#3 PEF processing
#| eval: true
#| label: plot-E
#| fig-height: 8
#| fig-width: 12
# List of cases objects
inactivation_obj <- list(inactivation_tp, inactivation_hpp, inactivation_pef)
# Function to plot outputs for a given case object and growth distribution name
plot_case_outputs <- function(cases_obj, inactivation_obj) {
plot_outputs(cases_obj, chosen = c()
}
#| eval: true
#| label: plot-E
#| fig-height: 8
#| fig-width: 12
# List of cases objects
inactivation_obj <- list(inactivation_tp, inactivation_hpp, inactivation_pef)
# Function to plot outputs for a given case object and growth distribution name
plot_case_outputs <- function(cases_obj, inactivation_obj) {
plot_outputs(cases_obj, chosen = c(NULL)
}
#| eval: true
#| label: plot-E
#| fig-height: 8
#| fig-width: 12
# List of cases objects
inactivation_obj <- list(inactivation_tp, inactivation_hpp, inactivation_pef)
# Function to plot outputs for a given case object and growth distribution name
plot_case_outputs <- function(cases_obj, inactivation_obj) {
plot_outputs(cases_obj)
}
# Use mapply to plot the outputs and print each plot
plots <- mapply(function(cases_obj, inactivation_obj) {
p <- plot_case_outputs(cases_obj, inactivation_obj)
print(p)
}, cases_obj, inactivation_obj)
#1 Thermal processing
#2 High Pressure Processing
#3 PEF processing
#| eval: true
#| label: plot-E
#| fig-height: 8
#| fig-width: 12
# List of cases objects
inactivation_obj <- list(inactivation_tp, inactivation_hpp, inactivation_pef)
# Function to plot outputs for a given case object and growth distribution name
plot_case_outputs <- function(cases_obj, inactivation_obj) {
plot_outputs(cases_obj, chosen = c("logN0", "Treatment_hpp"))
}
# Use mapply to plot the outputs and print each plot
plots <- mapply(function(cases_obj, inactivation_obj) {
p <- plot_case_outputs(cases_obj, inactivation_obj)
print(p)
}, cases_obj, inactivation_obj)
#1 Thermal processing
#2 High Pressure Processing
#3 PEF processing
#| eval: true
#| label: plot-E
#| fig-height: 8
#| fig-width: 12
# List of cases objects
inactivation_obj <- list(inactivation_tp, inactivation_hpp, inactivation_pef)
# Function to plot outputs for a given case object and growth distribution name
plot_case_outputs <- function(cases_obj, inactivation_obj) {
plot_outputs(cases_obj, chosen = c("logN0", "Treatment_tp", "Treatment_hpp", "Treatment_pef"))
}
# Use mapply to plot the outputs and print each plot
plots <- mapply(function(cases_obj, inactivation_obj) {
p <- plot_case_outputs(cases_obj, inactivation_obj)
print(p)
}, cases_obj, inactivation_obj)
#1 Thermal processing
#2 High Pressure Processing
#3 PEF processing
#| eval: true
quantile_table(cases_tp, chosen = c("cases", "Pill", "dose", "Treatment_tp"),
probs = c(0.50, 0.90, 0.99))
quantile_table(cases_hpp, chosen = c("cases", "Pill", "dose", "Treatment_hpp"),
probs = c(0.50, 0.90, 0.99))
quantile_table(cases_pef, chosen = c("cases", "Pill", "dose", "Treatment_pef"),
probs = c(0.50, 0.90, 0.99))
#| eval: true
# Function to plot outputs for a given case object and growth distribution name
plot_case_outputs <- function(cases_obj, inactivation_obj) {
plot_outputs(cases_obj, chosen = c("logN0", "Treatment_tp", "Treatment_hpp", "Treatment_pef"),
type = "violin")
}
# Use mapply to plot the outputs and print each plot
plots <- mapply(function(cases_obj, inactivation_obj) {
p <- plot_case_outputs(cases_obj, inactivation_obj)
print(p)
}, cases_obj, inactivation_obj)
#1 Thermal processing
#2 High Pressure Processing
#3 PEF processing
#| eval: true
# Function to plot outputs for a given case object and growth distribution name
plot_case_outputs <- function(cases_obj, inactivation_obj) {
plot_outputs(cases_obj, chosen = c("logN0", "Treatment_tp", "Treatment_hpp", "Treatment_pef"),
type = "density")
}
# Use mapply to plot the outputs and print each plot
plots <- mapply(function(cases_obj, inactivation_obj) {
p <- plot_case_outputs(cases_obj, inactivation_obj)
print(p)
}, cases_obj, inactivation_obj)
#1 Thermal processing
#2 High Pressure Processing
#3 PEF processing
#1 Thermal processing
#2 High Pressure Processing
#3 PEF processing
tornado_plot(cases_tp)
tornado_plot(cases_hpp)
tornado_plot(cases_pef)
#| eval: true
quantile_table_2D(cases_tp, chosen = c("cases_tp","Pill_tp", "dose_tp", "Treatment_tp"),
probs = c(0.50, 0.90, 0.99))
#| eval: true
quantile_table_2D(cases_tp, chosen = c("cases","Pill", "dose", "Treatment_tp"),
probs = c(0.50, 0.90, 0.99))
#| eval: true
quantile_table_2D(cases_tp, chosen = c("cases","Pill", "dose", "Treatment"),
probs = c(0.50, 0.90, 0.99))
#| eval: true
quantile_table_2D(cases_tp, chosen = c("cases", "Pill", "dose"),
probs = c(0.50, 0.90, 0.99))
#| eval: true
str(cases_tp)
str(cases_hpp)
str(cases_pef)
quantile_table_2D(cases_tp, chosen = c("cases", "Pill", "dose"),
probs = c(0.50, 0.90, 0.99))
#| eval: true
str(cases_tp)
str(cases_hpp)
str(cases_pef)
str(cases_tp$simulations_multi)
#| eval: true
quantile_table_2D(cases_tp,
probs = c(0.50, 0.90, 0.99))
#| eval: true
#| echo: false
#| include: false
# We first load our libraries
library(tidyverse)
library(biorisk)
logN0 <- Uniform$new("logN0", # A uniform distribution
level = 0)$
map_input("min",
Constant$new("logN0_min", 0) # with a constant min. value
)$
map_input ("max",
Constant$new("logN0_max", 1) # and a constant max. value
)
logDref <- -0.67
t_value <- 1.97
sigma <- 0.62
logDrefupper <- logDref + t_value*sigma
logDreflower <- logDref - t_value*sigma
# Convert from log scale to the original scale
Drefupper <- 10^logDrefupper
Dreflower <- 10^logDreflower
# Print the result
print(Drefupper)
print(Dreflower)
## Secondary model
#temperature <- Normal$new("temperature", level = 0)$  # Normal pressure level with some variability assigned
#map_input("mu", Constant$new("temperature_mu", 72))$
# map_input("sigma", Constant$new("temperature_sigma", 5))
Dref_tp <- Constant$new("Dref_tp", Drefupper)
sec_model_tp <- Dz_model$new("D_tp")$
map_input("Dref", Dref_tp)$
map_input("temperature", Constant$new("temperature", 72))$
map_input("z", Constant$new("z_tp", 10.67))$
map_input("Tref", Constant$new("Tref", 70))
t_tp <- Constant$new("t_tp", 0.333) # the treatment time (minutes)
inactivation_tp <- LogLinInactivation$new("Treatment_tp")$
map_input("logN0", logN0)$ #We map logN0 to the initial count defined before
map_input("D", sec_model_tp)$
map_input("t", t_tp)
## Secondary model
pressure <- Normal$new("pressure", level = 0)$  # Normal pressure level with some variability assigned
map_input("mu", Constant$new("pressure_mu", 550))$
map_input("sigma", Constant$new("pressure_sigma", 20))
# Dref_hpp <- Uniform$new("Dref_hpp", level = 0)$  # Variability in Dref
# map_input("min", Constant$new("Dref_hpp_min", 1))$
# map_input("max", Constant$new("Dref_hpp_max", 4))
sec_model_hpp <- Dz_model$new("D_hpp")$
map_input("Dref", Constant$new("Dref_hpp", 1.3))$
map_input("temperature", pressure)$
map_input("z", Constant$new("z_hpp", 304))$
map_input("Tref", Constant$new("Pref", 400))
# t_hpp <- Constant$new("t_hpp", 5) # the treatment time (minutes)
inactivation_hpp <- LogLinInactivation$new("Treatment_hpp")$
map_input("logN0", logN0)$ #We map logN0 to the initial count defined before
map_input("D", sec_model_hpp)$
map_input("t", Constant$new("t_hpp", 1))
# D_pef <- Uniform$new("D_pef", level = 0)$  # Variability in D_pef
# map_input("min", Constant$new("D_pef_min", 70))$
# map_input("max", Constant$new("D_pef_max", 90))
energy_pef <- Normal$new("energy_pef", level = 0)$  # Normal energy input level with some variability assigned
map_input("mu", Constant$new("energy_mu", 120))$
map_input("sigma", Constant$new("energy_sigma", 2))
inactivation_pef <- LogLinInactivation$new("Treatment_pef")$
map_input("logN0", logN0)$ #We map logN0 to the initial count defined before
map_input("D", Constant$new("D_pef", 82.5))$
map_input("t", energy_pef)
inactivation_tp$simulate(1000)
inactivation_tp$density_plot()
inactivation_hpp$simulate(1000)
inactivation_hpp$density_plot()
inactivation_pef$simulate(1000)
inactivation_pef$density_plot()
#| eval: true
# Define the serving_size object
serving_size <- Uniform$new("size", level = 0)$  # Create a new Uniform object named 'size'
map_input("min", Constant$new("min_size", 200))$  # Map the 'min' input to a constant value of 200
map_input("max", Constant$new("max_size", 300))  # Map the 'max' input to a constant value of 500
#| eval: true
# Define a function to create a Concentration2Dose object with mapped inputs
# This function takes two arguments: 'name' and 'logN_input'
# @param name The name of the Concentration2Dose object
# @param logN_input The input object to map to the 'logN' parameter
# @return A Concentration2Dose object with the specified mappings
create_consumer_dose <- function(name, logN_input) {
Concentration2Dose$new(name)$  # Create a new Concentration2Dose object with the given name
map_input("logN", logN_input)$  # Map the 'logN' input to the provided 'logN_input' argument
map_input("size", serving_size)  # Map the 'size' input to the 'serving_size' object
}
# Use the function to create three different consumer dose objects
# Create 'consumer_dose_tp' by calling the function with 'dose' name and 'growth_distrib_tp' for logN
consumer_dose_tp <- create_consumer_dose("dose", inactivation_tp)
# Create 'consumer_dose_hpp' by calling the function with 'dose' name and 'growth_distrib_hpp' for logN
consumer_dose_hpp <- create_consumer_dose("dose", inactivation_hpp)
# Create 'consumer_dose_pef' by calling the function with 'dose' name and 'growth_distrib_pef' for logN
consumer_dose_pef <- create_consumer_dose("dose", inactivation_pef)
#| eval: true
# Define a function to create a DoseResponse_Exponential object with mapped inputs
# This function takes two arguments: 'name' and 'dose_input'
# @param name The name of the DoseResponse_Exponential object
# @param dose_input The input object to map to the 'dose' parameter
# @return A DoseResponse_Exponential object with the specified mappings
create_pill <- function(name, dose_input) {
DoseResponse_Exponential$new(name)$  # Create a new DoseResponse_Exponential object with the given name
map_input("r", Constant$new("r_dr", 9.3e-3))$  # Map the 'r' input to a constant value of 9.3e-3
map_input("dose", dose_input)  # Map the 'dose' input to the provided 'dose_input' argument
}
# Create the three different Pill objects
Pill_tp <- create_pill("Pill", consumer_dose_tp)
Pill_hpp <- create_pill("Pill", consumer_dose_hpp)
Pill_pef <- create_pill("Pill", consumer_dose_pef)
# List of Pill objects
pill_objects <- list(Pill_tp, Pill_hpp, Pill_pef)
# Calculate and print the median values for each dose response object
median_values <- lapply(pill_objects, function(pill) {
median_value <- pill$point_estimate()
print(median_value)
return(median_value)
})
#| eval: true
# Calculate the mu_mean values by multiplying each median value by 1e12
mu_means <- lapply(median_values, function(median_value) {
4.6e10 * median_value
})
# Print the mu_mean values
print(mu_means)
#| eval: true
# Define a function to create a Pill2Cases_N object with mapped inputs
# This function takes two arguments: 'name' and 'pill_input'
# @param name The name of the Pill2Cases_N object
# @param pill_input The input object to map to the 'Pill' parameter
# @return A Pill2Cases_N object with the specified mappings
create_cases <- function(name, pill_input) {
Pill2Cases_N$new(name)$  # Create a new Pill2Cases_N object with the given name
map_input("Pill", pill_input)$  # Map the 'Pill' input to the provided 'pill_input' argument
map_input("servings", Constant$new("n_servings", 4.6e10))  # Map the 'servings' input to a constant value of 4.6e10
}
# Create the cases objects for each Pill
cases_tp <- create_cases("cases", Pill_tp)
cases_hpp <- create_cases("cases", Pill_hpp)
cases_pef <- create_cases("cases", Pill_pef)
# List of cases objects
cases_obj <- list(cases_tp, cases_hpp, cases_pef)
# Calculate and print the number of cases for each Pill object
cases_values <- lapply(cases_obj, function(cases) {
cases_value <- cases$point_estimate()
print(cases_value)
return(cases_value)
})
#| eval: true
cases_tp$simulate(100000, seed = 241)
cases_hpp$simulate(100000, seed = 241)
cases_pef$simulate(100000, seed = 241)
#| eval: true
cases_tp$histogram(add_discrete = TRUE) + scale_x_log10()
cases_hpp$histogram(add_discrete = TRUE) + scale_x_log10()
cases_pef$histogram(add_discrete = TRUE) + scale_x_log10()
#| eval: true
quantile_table(cases_tp, chosen = c("cases", "Pill", "dose", "Treatment_tp"),
probs = c(0.50, 0.90, 0.99))
quantile_table(cases_hpp, chosen = c("cases", "Pill", "dose", "Treatment_hpp"),
probs = c(0.50, 0.90, 0.99))
quantile_table(cases_pef, chosen = c("cases", "Pill", "dose", "Treatment_pef"),
probs = c(0.50, 0.90, 0.99))
#| eval: true
#| label: plot-E
#| fig-height: 8
#| fig-width: 12
# List of cases objects
inactivation_obj <- list(inactivation_tp, inactivation_hpp, inactivation_pef)
# Function to plot outputs for a given case object and growth distribution name
plot_case_outputs <- function(cases_obj, inactivation_obj) {
plot_outputs(cases_obj, chosen = c("logN0", "Treatment_tp", "Treatment_hpp", "Treatment_pef"))
}
# Use mapply to plot the outputs and print each plot
plots <- mapply(function(cases_obj, inactivation_obj) {
p <- plot_case_outputs(cases_obj, inactivation_obj)
print(p)
}, cases_obj, inactivation_obj)
#1 Thermal processing
#2 High Pressure Processing
#3 PEF processing
#| eval: true
# Function to plot outputs for a given case object and growth distribution name
plot_case_outputs <- function(cases_obj, inactivation_obj) {
plot_outputs(cases_obj, chosen = c("logN0", "Treatment_tp", "Treatment_hpp", "Treatment_pef"),
type = "violin")
}
# Use mapply to plot the outputs and print each plot
plots <- mapply(function(cases_obj, inactivation_obj) {
p <- plot_case_outputs(cases_obj, inactivation_obj)
print(p)
}, cases_obj, inactivation_obj)
#1 Thermal processing
#2 High Pressure Processing
#3 PEF processing
#| eval: true
# Function to plot outputs for a given case object and growth distribution name
plot_case_outputs <- function(cases_obj, inactivation_obj) {
plot_outputs(cases_obj, chosen = c("logN0", "Treatment_tp", "Treatment_hpp", "Treatment_pef"),
type = "density")
}
# Use mapply to plot the outputs and print each plot
plots <- mapply(function(cases_obj, inactivation_obj) {
p <- plot_case_outputs(cases_obj, inactivation_obj)
print(p)
}, cases_obj, inactivation_obj)
#1 Thermal processing
#2 High Pressure Processing
#3 PEF processing
#1 Thermal processing
#2 High Pressure Processing
#3 PEF processing
tornado_plot(cases_tp)
tornado_plot(cases_hpp)
tornado_plot(cases_pef)
#| eval: true
cases_tp$simulate_2D(1000, 100, seed = 792)
cases_hpp$simulate_2D(1000, 100, seed = 792)
cases_pef$simulate_2D(1000, 100, seed = 792)
inactivation_tp$density_plot_2D()
inactivation_hpp$density_plot_2D()
inactivation_pef$density_plot_2D()
inactivation_tp$cummulative_plot_2D()
inactivation_hpp$cummulative_plot_2D()
inactivation_pef$cummulative_plot_2D()
git push -u origin master
git push origin master
