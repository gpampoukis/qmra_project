dplyr::mutate(
x = rlogis(niter0, self$mean, self$scale)
)
## Save it
self$simulations_multi[[iter1]] <- sims
## Return the output
invisible(sims[[self$output]])
}
)
)
# Example usage of the LogisticDist class
logistic_element <- LogisticDist$new(name = "Growth During Storage", mean = -0.061, scale = 0.13)
#| eval: true
#| echo: false
#| include: false
# We first load our libraries
library(tidyverse)
library(biorisk)
# This is based on Duffy and Schaffner 2001
# They are probability distributions to simulate the change of STEC in ciders during storage where there is an overall decline although a small fraction of the time a slight increase might be seen
# Load necessary libraries
library(R6)
library(tibble)
library(dplyr)
library(stats)  # For rlogis function
# Assuming ContinuousElement is already defined somewhere in your package
#' @title LogisticDist Class
#'
#' @description
#' An element for a logistic distribution
#'
#' @export
#'
LogisticDist <- R6::R6Class(
classname = "LogisticDist",
inherit = ContinuousElement,
public = list(
#' @description
#' Creates a new instance of this [R6][R6::R6Class] class.
#'
#' @param name A character defining the name for the element
#' @param mean Mean of the logistic distribution
#' @param scale Scale of the logistic distribution
#' @param units A character vector of units for each input
#' @param output_unit A character with the unit of the output
#' @param level Level of the distribution (for 2D Monte Carlo). By default, `0`
#'
#' @return A new instance of the element
#'
initialize = function(name,
mean,
scale,
units = NA,
output_unit = NA,
level = 0) {
super$initialize(name,
input_names = c("mean", "scale"),
input_types = list(mean = "continuous",
scale = "continuous"),
units = units,
element_type = "distribution",
output_var = "x",
output_unit = output_unit,
level = level)
self$mean <- mean
self$scale <- scale
},
#' @description
#' Returns the expected value
#'
point_estimate = function() {
self$mean
}
),
private = list(
update_output = function(niter) {
sims <- self$simulations %>%
dplyr::mutate(
x = rlogis(niter, self$mean, self$scale)
)
self$simulations <- sims
},
update_output_level = function(niter0, iter1 = 1, level = 0) {
if (self$level > level) {
niter0 <- 1
}
sims <- self$simulations_multi[[iter1]] %>%
dplyr::mutate(
x = rlogis(niter0, self$mean, self$scale)
)
## Save it
self$simulations_multi[[iter1]] <- sims
## Return the output
invisible(sims[[self$output]])
}
)
)
# Example usage of the LogisticDist class
logistic_element <- LogisticDist$new(name = "Growth During Storage", mean = -0.061, scale = 0.13)
# This is based on Duffy and Schaffner 2001
# They are probability distributions to simulate the change of STEC in ciders during storage where there is an overall decline although a small fraction of the time a slight increase might be seen
# Load necessary libraries
library(R6)
library(tibble)
library(dplyr)
library(stats)  # For rlogis function
# Assuming ContinuousElement is already defined somewhere in your package
# For the purpose of testing, we will define a basic version of ContinuousElement here
ContinuousElement <- R6::R6Class(
classname = "ContinuousElement",
public = list(
name = NULL,
input_names = NULL,
input_types = NULL,
units = NULL,
element_type = NULL,
output_var = NULL,
output_unit = NULL,
level = NULL,
simulations = NULL,
simulations_multi = NULL,
initialize = function(name,
input_names,
input_types,
units,
element_type,
output_var,
output_unit,
level) {
self$name <- name
self$input_names <- input_names
self$input_types <- input_types
self$units <- units
self$element_type <- element_type
self$output_var <- output_var
self$output_unit <- output_unit
self$level <- level
self$simulations <- tibble()
self$simulations_multi <- list()
},
point_estimate = function() {
stop("point_estimate not implemented")
}
)
)
#' @title LogisticDist Class
#'
#' @description
#' An element for a logistic distribution
#'
#' @export
#'
LogisticDist <- R6::R6Class(
classname = "LogisticDist",
inherit = ContinuousElement,
public = list(
#' @description
#' Creates a new instance of this [R6][R6::R6Class] class.
#'
#' @param name A character defining the name for the element
#' @param mean Mean of the logistic distribution
#' @param scale Scale of the logistic distribution
#' @param units A character vector of units for each input
#' @param output_unit A character with the unit of the output
#' @param level Level of the distribution (for 2D Monte Carlo). By default, `0`
#'
#' @return A new instance of the element
#'
initialize = function(name,
mean,
scale,
units = NA,
output_unit = NA,
level = 0) {
super$initialize(name,
input_names = c("mean", "scale"),
input_types = list(mean = "continuous",
scale = "continuous"),
units = units,
element_type = "distribution",
output_var = "x",
output_unit = output_unit,
level = level)
self$mean <- mean
self$scale <- scale
},
#' @description
#' Returns the expected value
#'
point_estimate = function() {
self$mean
}
),
private = list(
update_output = function(niter) {
sims <- self$simulations %>%
dplyr::mutate(
x = rlogis(niter, self$mean, self$scale)
)
self$simulations <- sims
},
update_output_level = function(niter0, iter1 = 1, level = 0) {
if (self$level > level) {
niter0 <- 1
}
sims <- self$simulations_multi[[iter1]] %>%
dplyr::mutate(
x = rlogis(niter0, self$mean, self$scale)
)
## Save it
self$simulations_multi[[iter1]] <- sims
## Return the output
invisible(sims[[self$output]])
}
)
)
# Example usage of the LogisticDist class
logistic_element <- LogisticDist$new(name = "Growth During Storage", mean = -0.061, scale = 0.13)
# This is based on Duffy and Schaffner 2001
# They are probability distributions to simulate the change of STEC in ciders during storage where there is an overall decline although a small fraction of the time a slight increase might be seen
# Load necessary libraries
library(R6)
library(tibble)
library(dplyr)
library(stats)  # For rlogis function
# Assuming ContinuousElement is already defined somewhere in your package
# For the purpose of testing, we will define a basic version of ContinuousElement here
ContinuousElement <- R6::R6Class(
classname = "ContinuousElement",
public = list(
name = NULL,
input_names = NULL,
input_types = NULL,
units = NULL,
element_type = NULL,
output_var = NULL,
output_unit = NULL,
level = NULL,
simulations = NULL,
simulations_multi = NULL,
initialize = function(name,
input_names,
input_types,
units,
element_type,
output_var,
output_unit,
level) {
self$name <- name
self$input_names <- input_names
self$input_types <- input_types
self$units <- units
self$element_type <- element_type
self$output_var <- output_var
self$output_unit <- output_unit
self$level <- level
self$simulations <- tibble()
self$simulations_multi <- list()
},
point_estimate = function() {
stop("point_estimate not implemented")
}
)
)
#' @title LogisticDist Class
#'
#' @description
#' An element for a logistic distribution
#'
#' @export
#'
LogisticDist <- R6::R6Class(
classname = "LogisticDist",
inherit = ContinuousElement,
public = list(
mean = NULL,
scale = NULL,
#' @description
#' Creates a new instance of this [R6][R6::R6Class] class.
#'
#' @param name A character defining the name for the element
#' @param mean Mean of the logistic distribution
#' @param scale Scale of the logistic distribution
#' @param units A character vector of units for each input
#' @param output_unit A character with the unit of the output
#' @param level Level of the distribution (for 2D Monte Carlo). By default, `0`
#'
#' @return A new instance of the element
#'
initialize = function(name,
mean,
scale,
units = NA,
output_unit = NA,
level = 0) {
self$mean <- mean
self$scale <- scale
super$initialize(name,
input_names = c("mean", "scale"),
input_types = list(mean = "continuous",
scale = "continuous"),
units = units,
element_type = "distribution",
output_var = "x",
output_unit = output_unit,
level = level)
},
#' @description
#' Returns the expected value
#'
point_estimate = function() {
self$mean
}
),
private = list(
update_output = function(niter) {
sims <- self$simulations %>%
dplyr::mutate(
x = rlogis(niter, self$mean, self$scale)
)
self$simulations <- sims
},
update_output_level = function(niter0, iter1 = 1, level = 0) {
if (self$level > level) {
niter0 <- 1
}
sims <- self$simulations_multi[[iter1]] %>%
dplyr::mutate(
x = rlogis(niter0, self$mean, self$scale)
)
## Save it
self$simulations_multi[[iter1]] <- sims
## Return the output
invisible(sims[[self$output]])
}
)
)
# Example usage of the LogisticDist class
logistic_element <- LogisticDist$new(name = "Growth During Storage", mean = -0.061, scale = 0.13)
# Simulate
logistic_element$update_output(1000)
devtools::install_github("albgarre/biorisk", build_vignettes = TRUE, force =TRUE)
#| eval: false
#| echo: false
logN0 <- Uniform$new("logN0", # A uniform distribution
level = 0)$
map_input("min",
Constant$new("logN0_min", 0) # with a constant min. value
)$
map_input ("max",
Constant$new("logN0_max", 1) # and a constant max. value
)
#| eval: true
#| echo: false
#| include: false
# We first load our libraries
library(tidyverse)
library(biorisk)
#| eval: false
#| echo: false
logN0 <- Uniform$new("logN0", # A uniform distribution
level = 0)$
map_input("min",
Constant$new("logN0_min", 0) # with a constant min. value
)$
map_input ("max",
Constant$new("logN0_max", 1) # and a constant max. value
)
logN0$point_estimate()
#| eval: false
#| echo: false
logN0 <- Uniform$new("logN0", # A uniform distribution
level = 0)$
map_input("min",
Constant$new("logN0_min", 20) # with a constant min. value
)$
map_input ("max",
Constant$new("logN0_max", 35) # and a constant max. value
)
logN0$point_estimate()
#| eval: false
#| echo: false
logN0 <- Uniform$new("logN0", # A uniform distribution
level = 0)$
map_input("min",
Constant$new("logN0_min", 21) # with a constant min. value
)$
map_input ("max",
Constant$new("logN0_max", 35) # and a constant max. value
)
logN0$point_estimate()
devtools::install_github("albgarre/biorisk", build_vignettes = TRUE, force =TRUE)
#| eval: true
#| echo: false
#| include: false
# We first load our libraries
library(tidyverse)
library(biorisk)
#| eval: false
#| echo: false
# Define the Uniform distribution for logN0
logN0 <- Uniform$new("logN0", level = 0)$
map_input("min", Constant$new("logN0_min", 0))$
map_input("max", Constant$new("logN0_max", 1))
# Define the intercept with some uncertainty based on the standard error of the regression
intercept_pef <- Normal$new("intercept_pef", level = 1)$
map_input("mu", Constant$new("pef_intercept_mu", 0.72907))
map_input("sigma", Constant$new("pef_intercept_sigma", 1.02499))
#| eval: false
#| echo: false
# Define the Uniform distribution for logN0
logN0 <- Uniform$new("logN0", level = 0)$
map_input("min", Constant$new("logN0_min", 0))$
map_input("max", Constant$new("logN0_max", 1))
# Define the intercept with some uncertainty based on the standard error of the regression
intercept_pef <- Normal$new("intercept_pef", level = 1)$
map_input("mu", Constant$new("pef_intercept_mu", 0.72907))$
map_input("sigma", Constant$new("pef_intercept_sigma", 1.02499))
# Create the new Uniform distribution for logN0_pef
logN0_pef <- Constant$new("logN0_pef", logN0-intercept_pef)
#| eval: false
#| echo: false
# Define the Uniform distribution for logN0
logN0 <- Uniform$new("logN0", level = 0)$
map_input("min", Constant$new("logN0_min", 0))$
map_input("max", Constant$new("logN0_max", 1))
# Define the intercept with some uncertainty based on the standard error of the regression
intercept_pef <- Normal$new("intercept_pef", level = 1)$
map_input("mu", Constant$new("pef_intercept_mu", 0.72907))$
map_input("sigma", Constant$new("pef_intercept_sigma", 1.02499))
# Create the new distribution for logN0_pef
logN0_pef <- logN0$subtract(intercept_pef)
#| eval: false
#| echo: false
# Define the Uniform distribution for logN0
logN0 <- Uniform$new("logN0", level = 0)$
map_input("min", Constant$new("logN0_min", 0))$
map_input("max", Constant$new("logN0_max", 1))
# Define the intercept with some uncertainty based on the standard error of the regression
intercept_pef <- Normal$new("intercept_pef", level = 1)$
map_input("mu", Constant$new("pef_intercept_mu", 0.72907))$
map_input("sigma", Constant$new("pef_intercept_sigma", 1.02499))
# Create the new distribution for logN0_pef
logN0_pef <- ElementMinus$new("logN0_pef")$
map_input("a", logN0)$
map_input("b", intercept_pef)
# Check the point estimate
logN0_pef_estimate <- logN0_pef$point_estimate()
# Print the result
print(logN0_pef_estimate)
#| eval: false
#| echo: false
# Secondary model
pressure <- Normal$new("pressure", level = 0)$  # Normal pressure level with some variability assigned
map_input("mu", Constant$new("pressure_mu", 550))$
map_input("sigma", Constant$new("pressure_sigma", 20))
Dref_hpp <- Normal$new("Dref_hpp", level = 0)$  # variability in Dref
map_input("mu", Constant$new("Dref_hpp_mu", 1.1354))$
map_input("sigma", Constant$new("Dref_hpp_sigma", 0.42363))
sec_model_hpp <- Dz_model$new("D_hpp")$
map_input("Dref", Dref_hpp)$
map_input("temperature", pressure)$
map_input("z", Constant$new("z_hpp", 269.7))$
map_input("Tref", Constant$new("Pref", 400))
#| eval: true
#| echo: false
#| include: false
# We first load our libraries
library(tidyverse)
library(biorisk)
#| eval: true
#| echo: false
#| include: false
# We first load our libraries
library(tidyverse)
library(biorisk)
#| eval: false
#| echo: false
# Define the Uniform distribution for logN0
logN0 <- Uniform$new("logN0", level = 0)$
map_input("min", Constant$new("logN0_min", 0))$
map_input("max", Constant$new("logN0_max", 1))
# Define the intercept with some uncertainty based on the standard error of the regression
intercept_pef <- Normal$new("intercept_pef", level = 1)$
map_input("mu", Constant$new("pef_intercept_mu", 0.72907))$
map_input("sigma", Constant$new("pef_intercept_sigma", 1.02499))
# Create the new distribution for logN0_pef
logN0_pef <- ElementMinus$new("logN0_pef")$
map_input("a", logN0)$
map_input("b", intercept_pef)
# Check the point estimate
logN0_pef_estimate <- logN0_pef$point_estimate()
# Print the result
print(logN0_pef_estimate)
#| eval: false
#| echo: false
# Define the Uniform distribution for logN0
logN0 <- Uniform$new("logN0", level = 0)$
map_input("min", Constant$new("logN0_min", 0))$
map_input("max", Constant$new("logN0_max", 1))
# Define the intercept with some uncertainty based on the standard error of the regression
intercept_pef <- Normal$new("intercept_pef", level = 1)$
map_input("mu", Constant$new("pef_intercept_mu", 0.72907))$
map_input("sigma", Constant$new("pef_intercept_sigma", 1.02499))
# Create the new distribution for logN0_pef
logN0_pef <- ElementMinus$new("logN0_pef")$
map_input("a", logN0)$
map_input("b", intercept_pef)
# Check the point estimate
logN0_pef_estimate <- logN0_pef$point_estimate()
# Print the result
print(logN0_pef_estimate)
